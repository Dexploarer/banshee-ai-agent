name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '20'
  RUST_VERSION: 'stable'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Run type check
      run: bun run typecheck
      
    - name: Run linting
      run: bun run check
      
    - name: Run unit tests
      run: bun run test:run
      
    - name: Run test coverage
      run: bun run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          coverage/
          test-results/

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
        
    - name: Format check
      run: cd src-tauri && cargo fmt --all -- --check
      
    - name: Clippy check
      run: cd src-tauri && cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run unit tests
      run: cd src-tauri && cargo test --verbose
      
    - name: Run integration tests
      run: cd src-tauri && cargo test --test '*' --verbose
      
    - name: Install cargo-tarpaulin for coverage
      run: cargo install cargo-tarpaulin
      
    - name: Generate test coverage
      run: cd src-tauri && cargo tarpaulin --out xml --engine llvm --exclude-files src/main.rs
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src-tauri/cobertura.xml
        flags: backend
        name: backend-coverage
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          src-tauri/target/debug/deps/
          src-tauri/cobertura.xml

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
        
    - name: Install dependencies
      run: bun install
      
    - name: Build application
      run: bun run build
      
    - name: Install Playwright browsers
      run: bunx playwright install --with-deps
      
    - name: Run E2E tests
      run: bun run test:e2e
      
    - name: Archive E2E results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Run security audit (Node.js)
      run: bun audit
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit (Rust)
      run: cd src-tauri && cargo audit
      
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/rust
        
  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
        
    - name: Install dependencies
      run: bun install
      
    - name: Build application (release mode)
      run: bun run build
      
    - name: Run performance benchmarks
      run: |
        # Run memory performance tests
        cd src-tauri && cargo bench --bench memory_benchmarks
        
        # Run frontend performance tests
        bun run test:perf
        
    - name: Archive performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          performance-results/
          src-tauri/target/criterion/

  # Test Matrix for Multiple Platforms
  cross-platform-tests:
    name: Cross-Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]
        rust-version: [stable, beta]
        exclude:
          # Exclude beta Rust on Windows to reduce CI load
          - os: windows-latest
            rust-version: beta
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'bun'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
        
    - name: Install dependencies
      run: bun install
      
    - name: Run quick tests
      run: |
        bun run typecheck
        bun run test:run --reporter=basic
        cd src-tauri && cargo test --lib
        
  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Security Tests: ${{ needs.security-tests.result }}"
        
        if [[ "${{ needs.frontend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.backend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.e2e-tests.result }}" != "success" ]] || \
           [[ "${{ needs.security-tests.result }}" != "success" ]]; then
          echo "Some tests failed!"
          exit 1
        else
          echo "All tests passed!"
        fi